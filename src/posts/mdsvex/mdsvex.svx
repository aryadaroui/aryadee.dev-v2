---
title: This blog's markdown features
date: 15 Apr 2023
tags:
  - Markdown
  - SvelteKit
  - writing
thumbnail: ./thumbnail.png
---

<script>
  import plot_json from './hue_response_curve.json'
</script>

> Previous renditions of my blog were cumbersome to write in and didn't let me express myself how I would've liked, so I've added more automation and features for this opening. I'm using [mdsvex](https://mdsvex.com/) to parse and transform markdown, and [rehype-pretty-code](https://rehype-pretty-code.netlify.app/) to add syntax highlighting to code. I've also added a couple custom components and a sticky table of contents, generated with [svelte-toc](https://github.com/janosh/svelte-toc).

# Basic Markdown

Some *emphasized text*, **bold text**, ~~strikethrough~~ text.

- An unordered list
	- item 1
	- item 2

1. An ordered list
	1. item 1
	2. item 2
2. second
1. third

> A blockquote about something.

Inline `code` and code blocks:


```
  cute cat
               __..--''``---....___   _..._    __
           _.-'    .-/";  `        ``<._  ``.''_ `.       
       _.-' _..--.'_    \                    `( ) )      
      (_..-'    (< _     ;_..__               ; `'      
                 `-._,_)'      ``--...____..-'         
```


We having working inline math $f(x) = x^2$, and some block math:


$$
  \int \, x^2 \, \mathrm{d}x = \frac{1}{3}x^3 + C
$$

# Extra features

## Pretty code

Syntax highlighted inline code, `f(x) => { x^2 }{:js}`, with support for token colors: `variable{:.variable}` `function{:.function}` `keyword{:.keyword}` `param{:.param}` `string{:.string}` `number{:.number}` `comment{:.comment}` `type{:.type}`. Of course, this comes with support for syntax highlighted block code. In addition to scrolling, you can click on a code block to focus it, expanding it to the width of your screen--useful for long lines.

```python
# Prints a greeting to the number of friends you have, but this is also an example of a long line of code.
def howdy_yall(num_friends: int)
  print('howdy to all ' + num_friends + ' of my friends!')

howdy_yall(0)
```

There's also support for numbering, titles and highlighting lines and words.

```svelte {3} title="component.svelte" showLineNumbers /href/
<a href={link}>
  <div class="link-box">
    <slot />
  </div>
</a>
```


## Custom components

And with mdsvex, we can easily use Svelte components, like custom callouts!

<Callout title="Escaping special characters" icon="warning" >

In code blocks, everything is displayed as expected, but outside of code blocks, you'll need to escape some characters.

Because of how mdsvex handles `{}`, `<>`, and symbols, if you're <u>outside of a code block</u>, you'll need to escape them with the HTML entity codes: `&amp;amp;lt; &amp;amp;gt;`  to yield &amp;lt; &amp;gt; and `&ampamp;#123; &ampamp;#125;` to yield &amp#123; &amp#125;.

This is because mdsvex proactively converts html entities, so simply using `&amp;lt;` yields `<` to Svelte first, which is seen as an opening tag and throws an error. This conversion happens even in inline code, but because it's still in a preformatted tag, it doesn't throw an error.

</Callout>



And interactive Plotly plots, thanks to [sveltekit-plotly](https://github.com/aknakos/sveltekit-plotly)!

<Plot plot_json={plot_json} />


<Callout title="Nested callouts" icon="smile" >
And yes you can embed them inside of each other!

<Callout title="Example" icon="heart" >

<Plot plot_json={plot_json} />

</Callout>

</Callout>
