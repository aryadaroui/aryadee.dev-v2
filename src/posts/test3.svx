---
title: test3
date: 13 Mar 2023
tags:
  - python
---

<script>
 import Callout from '$lib/Callout.svelte';
</script>

# test3.svx


what's up here's some inline code `print("Hello World"){:python}`

```python {2-5} showLineNumbers title="test3.py"
print("Hello World")
print("Daisy daisy")
print("Give me your answer do")

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```












<Callout title="A callout!" icon="terminal"  >

Wow look at this code!


```python
def read_img(filename):
	'''reads a local image file and returns its data as a numpy float32 ndarray.

	Note that the read pixel values are normalized between 0.0 and 1.0, i.e. they are not uint8!
	'''
	return np.array(Image.open(filename)).astype(np.float32) / 255 

def write_img(img, filename):
	'''input img should be float.'''
	Image.fromarray((img * 255).astype('uint8')).save(filename)

def show_img_rgb(img_rgb):
	'''shows RGB image. hides ugly default matplotlib axes'''
	plt.axis('off')
	plt.gcf().set_facecolor("#0f0f0f")
	plt.imshow(np.clip(img_rgb, 0, 1))

def show_img_gray(img_gray):
	'''shows grayscale image. hides ugly default matplotlib axes'''
	plt.axis('off')
	plt.gcf().set_facecolor("#0f0f0f")
	plt.imshow(np.clip(img_gray, 0, 1), cmap='gray')

def show_img_left_right(img_left, img_right):
	'''display images beside each other'''
	fig, axarr = plt.subplots(1,2)
	fig.set_facecolor('#0f0f0f')
	fig.subplots_adjust(wspace = 0.03)
	axarr[0].imshow(img_left)
	axarr[0].axis('off')
	axarr[1].imshow(img_right)
	axarr[1].axis('off')

def plot_tone_curve(y_data, f_interp, label='tone'):
	'''plots tone curve with its interp function'''
	fig = go.Figure()
	fig.add_trace(
		go.Scatter(
			x = [0.0, 0.25, 0.5, 0.75, 1.0],
			y = y_data,
			mode ='markers',
			name = 'data',
			marker_color = 'hotpink',
			marker_size = 10
		)
	)

	x_curve = np.linspace(0.0, 1.0, num=100)

	fig.add_trace(
		go.Scatter(
			x = x_curve,
			y = f_interp(x_curve),
			name = 'interp',
			line_color = 'skyblue',
			line_width = 3,
		)
	)

	fig.update_layout(
		title = "tone curve",
		xaxis = dict(
			title = 'input tone',
			range = [-0.1, 1.1],
			dtick = 0.25
		),
		yaxis = dict(
			title = 'output ' + label,
			range = [-0.1, 1.1],
			dtick = 0.25
		),
		margin = dict(
			t = 40,
			b = 20,
			l = 20,
			r = 20
		)
	)

	fig.layout.template = 'plotly_dark'
	
	fig.show()

def plot_thresh_curve(x_data, y_data, f_interp):
	'''plots threshold curve with its interp function'''
	fig = go.Figure()
	fig.add_trace(
		go.Scatter(
			x = x_data,
			y = y_data,
			mode ='markers',
			name = 'data',
			marker_color = 'hotpink',
			marker_size = 10
		)
	)

	x_curve = np.linspace(0.0, 1.0, num=100)

	fig.add_trace(
		go.Scatter(
			x = x_curve,
			y = f_interp(x_curve),
			name = 'interp',
			line_color = 'skyblue',
			line_width = 3,
		)
	)

	fig.update_layout(
		title = "threshold curve",
		xaxis = dict(
			title = 'input',
			range = [-0.1, 1.1],
			dtick = 0.25
		),
		yaxis = dict(
			title = 'output',
			range = [-0.1, 1.1],
			dtick = 0.25
		),
		margin = dict(
			t = 40,
			b = 20,
			l = 20,
			r = 20
		)
	)

	fig.layout.template = 'plotly_dark'
	
	fig.show()

def rgb_to_hls(img_rgb):
	'''convert RGB to HLS. H is float in range of 0 to 360! H and S are 0.0 to 1.0'''
	return cv2.cvtColor(img_rgb, cv2.COLOR_RGB2HLS)

def hls_to_rgb(img_hls):
	'''convert HLS to RGB. H is float in range of 0 to 360! H and S are 0.0 to 1.0'''
	return cv2.cvtColor(img_hls, cv2.COLOR_HLS2RGB)
```

</Callout>


<Callout title="A callout!" icon="heart"  >

Wow look at this code!


```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

<Callout title="A callout!" icon="bug"  >

Wow look at this code!


```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

<Callout title="A callout!" icon="warning"  >

Wow look at this code!


```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

<Callout title="A callout!" icon="lightning"  >

Wow look at this code!


```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

<Callout title="A callout!" icon="smile"  >

Wow look at this code!


```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

<Callout title="A callout!" icon="code"  >

Wow look at this code!

```python {2}  /weights/
print("Hello World")
print("Daisy daisy")
print("Give me your answer do") asdf asdf asd fas df asd fasdf asdfas df asdf s aasdfa sdfa sdf as df asd fas df asd f asdf asd f asd f

window = 10
weights = np.repeat(1.0, window)/window
smas = np.convolve(values, weights, 'valid')
```

</Callout>

asdf
